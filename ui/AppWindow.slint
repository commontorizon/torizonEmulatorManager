import {
    Button,
    HorizontalBox,
    VerticalBox,
    GridBox,
    ListView,
    AboutSlint,
    StandardListView,
    ScrollView,
    LineEdit, CheckBox, ProgressIndicator, SpinBox
 } from "std-widgets.slint";

export component AppWindow inherits Window {
    in-out property<bool> canCreateInstances : false;
    in-out property<int> storageSize : 8;
    in-out property<int> ramSize : 4;
    in-out property<int> instances : 1;
    in-out property<bool> running : false;
    in-out property<string> runningMessage : "Running ...";
    callback startEmulator();

    title: "Torizon Emulator Manager";

    max-width: 600px;
    max-height: 680px;
    min-width: 600px;
    min-height: 680px;

    background: @linear-gradient(30deg, #fcfcfc, #0164b1);

    popup := PopupWindow {
        Rectangle {
            height:100%;
            width: 100%;
            background: yellow;
        }
        x: 20px; y: 20px; height: 50px; width: 50px;
    }

    VerticalLayout {
        alignment: LayoutAlignment.start;
        padding: 50px;
        spacing: 10px;

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            Image {
                source: @image-url("./assets/torizonosblack.png");
            }
        }
    }

    VerticalLayout {
        alignment: LayoutAlignment.end;
        spacing: 10px;
        padding-bottom: 40px;

        HorizontalLayout {
            x: storageSizeInput.x;

            Text {
                text: "Storage Size (GB):";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            storageSizeInput := SpinBox {
                value <=> storageSize;
                width: 400px;
                height: 40px;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;

            Text {
                text: "RAM Size (GB):";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            ramSizeInput := SpinBox {
                value <=> ramSize;
                width: 400px;
                height: 40px;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;
            padding-top: 20px;

            canCreateInstancesCheck := CheckBox {
                text: "Start Multiple Instances";
                checked <=> canCreateInstances;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;

            Text {
                text: "Number of Instances:";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            instancesInput := SpinBox {
                enabled: canCreateInstances;
                value <=> instances;
                width: 400px;
                height: 40px;
            }
        }

        if (running == false) :
        HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding-top: 40px;

            buttonStart := Button {
                text: "Start Emulator";
                width: 400px;
                height: 40px;
                enabled: storageSize > 0 && ramSize > 0 && instances > 0;
                clicked => {
                    buttonStart.enabled = false;
                    storageSizeInput.enabled = false;
                    ramSizeInput.enabled = false;
                    instancesInput.enabled = false;
                    running = true;

                    if (canCreateInstances == false) {
                        instances = 1;
                    }

                    startEmulator();
                }
            }
        }

        if (running == true) :
        VerticalLayout {
            HorizontalLayout {
                padding-top: 40px;
                x: instancesInput.x;

                Text {
                    text: runningMessage;
                    font-size: 15px;
                }
            }

            HorizontalLayout {
                alignment: LayoutAlignment.center;

                runnin := ProgressIndicator {
                    width: 400px;
                    height: 40px;
                    indeterminate: true;
                }
            }


        }
    }
}
